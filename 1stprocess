/* This program is to create bricks with colors as a first step of creating a 
* breakout game
*
* Author: Kray Nguyen
* Date: 4/25/2018
*/

/* Constants for bricks */
var NUM_ROWS = 8;
var BRICK_TOP_OFFSET = 10;
var BRICK_SPACING = 2;
var NUM_BRICKS_PER_ROW = 10;
var BRICK_HEIGHT = 10;
var SPACE_FOR_BRICKS = getWidth() - (NUM_BRICKS_PER_ROW + 1) * BRICK_SPACING;
var BRICK_WIDTH = SPACE_FOR_BRICKS / NUM_BRICKS_PER_ROW;
var BRICK_X = BRICK_SPACING;
var BRICK_Y = BRICK_TOP_OFFSET;
var COLOR_NUMBER = 0.5;


/* Constants for ball and paddle */
var PADDLE_WIDTH = 80;
var PADDLE_HEIGHT = 15;
var PADDLE_OFFSET = 10;
var BALL_RADIUS = 15;

//Global variables
var brick;

function start(){
    drawRow();
}

/* This function draws numbers of bricks in a row.
* Precondition: None
* Postcondition: a row of defined color bricks are created
*/

function drawBrick(color){
    // by using a for loop, the program still works even if the constant is 
    // changed
    for(var i = 0; i < NUM_BRICKS_PER_ROW; i++){
        // create a brick with constants given 
        brick = new Rectangle(BRICK_WIDTH, BRICK_HEIGHT);
        
        // Position the first brick by using the constant that I created
        brick.setPosition(BRICK_X, BRICK_Y);
        
        // Set the color as the first row is programming
        brick.setColor(color);
        
        // For the first row, this helps the program to space the first brick
        // and the second brick, etc...
        BRICK_X = BRICK_X + BRICK_SPACING + BRICK_WIDTH;
        
        // Initiate the bricks to be drawn
        add(brick);
    }
    
    // After this program of the first row is finished, it moves on to set the 
    // position of the brick in the second row. The x vertical stays the same, 
    // but the y horizontal position has to be moved down with the variable
    // brick Y to equally distributed the rows.
    BRICK_X = BRICK_SPACING;
    BRICK_Y = BRICK_Y + BRICK_SPACING + BRICK_HEIGHT;
}

/* This function creates the bricks distributed through the number of NUM_ROWS
* Precondition: The first row is created
* Postcondition: The rows of bricks with a specific color requirement are created
*/

function drawRow(){
    // Using a for loop to draw the number of rows given in the constant
    for(var i = 0; i < NUM_ROWS; i++){
        
        // setting the color before the drawBrick function runs, this is a first
        // step to define the color
        var color = brickColor();
        drawBrick(color);
        
        // Each time a row is finished, the COLOR_NUMBER variables, which is 1 
        // initially, add 0.5 each time a row is finished
        COLOR_NUMBER += 0.5;
    }
}

/* This function defines what color a row of bricks will be.
* Precondition: a brick is created and the color will be identified afterwards
* Postcondition: A brick is colored with a defined color
*/

function brickColor(){
    // We have 4 colors, so we must use COLOR_NUMBER % 4 to define the 
    // correct colors. The dividing number % the divided number is equal the 
    // to the dividing number, which is the remainder. This is a rule in algebra
    // of mathematics 
    
    // With the specific requirement of 8 rows and 4 colors, the COLOR_NUMBER 
    // will be add 0.5 each row. We have to use the COLOR_NUMBER and the 
    // remainder to determine the color of that row. 
    if(COLOR_NUMBER % 4 == 0.5 || COLOR_NUMBER % 4 == 1){
        return Color.red;
    } 
    
    if(COLOR_NUMBER % 4 == 1.5 || COLOR_NUMBER % 4 == 2){
        return Color.orange;
    }
    
    if(COLOR_NUMBER % 4 == 2.5 || COLOR_NUMBER % 4 == 3){
        return Color.green;
    }
    
    if(COLOR_NUMBER % 4 == 3.5 || COLOR_NUMBER % 4 == 0){
        return Color.blue;
    }
}
